@top AlgorithmFile { AlgoritmoDeclaration+ }

@skip { space | LineComment }

@precedence {
  assign @right,

  statement @cut
}

statement[@isGroup=Statement] {
  EscrevaStatement |
  LeiaStatement |
  AssignmentExpression
}

expression[@isGroup=Expression] {
  String |
  Number |
  Float |
  @specialize[@name=BooleanLiteral]<Identifier, "Verdadeiro" | "Falso"> |
  VariableName
}

Type {
  kw<"Caractere"> |
  kw<"Inteiro"> |
  kw<"Real"> |
  kw<"Logico">
}

AlgoritmoDeclaration { 
  kw<"Algoritmo"> (Identifier | String) VariableDeclaration? BlockAlgoritmo
}

VariableDeclaration {
  kw<"Var"> (VariableDefinition)*
}

VariableDefinition {
  VariableName ":" Type
}

AssignmentExpression {
  VariableName !assign "<-" expression
}

VariableName { Identifier }

BlockAlgoritmo {
  kw<"Inicio"> (statement | expression)* kw<"Fim">
}

EscrevaStatement {
  kw<"Escreva"> expression
}

LeiaStatement {
  kw<"Leia"> VariableName
}

kw<term> { @specialize[@name={term}]<Identifier, term> }

@tokens {
  Identifier { identifierChar (identifierChar | @digit)* }
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  String {
    '"' (![\\\n"] | "\\" _)* '"'
  }
  LineComment { "//" ![\n]* }
  space { $[ \t\n\r]+ }
  Number { @digit+ }
  Float { @digit+ "." @digit+ }

  "<-"[@name=Equals]

  @precedence { Float, Number }
}